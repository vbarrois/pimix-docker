(()=>{var e={417:(e,t,s)=>{"use strict";s.r(t),s.d(t,{addSongLog:()=>o,addSongUserLog:()=>a,updateSongLog:()=>i});var n=s(614);const o=e=>n.default.SongLog.create(e),i=e=>n.default.SongLog.update({listenratio:e.listenratio},{where:{id:e.id}}),a=e=>n.default.SongLogUser.create(e)},890:e=>{"use strict";e.exports=(e,t)=>{const s=e.define("Artist",{name:t.STRING,state:t.BOOLEAN,spotifyId:t.STRING,popularity:t.INTEGER,followers:t.INTEGER});return s.associate=function(e){e.Artist.hasMany(e.ArtistRelated,{as:"ArtistRelations",foreignKey:"artist_id"})},s}},978:e=>{"use strict";e.exports=(e,t)=>{const s=e.define("ArtistGenre",{artist_id:t.INTEGER,genre_id:t.INTEGER},{indexes:[{unique:!0,fields:["artist_id","genre_id"]}]});return s.associate=function(e){e.Artist.belongsToMany(e.Genre,{as:"Genres",through:{model:s,unique:!1},foreignKey:"artist_id"}),e.Genre.belongsToMany(e.Artist,{as:"Artists",through:{model:s,unique:!1},foreignKey:"genre_id"})},s}},953:e=>{"use strict";e.exports=(e,t)=>e.define("ArtistRelated",{artist_id:t.INTEGER,name:t.STRING,spotifyId:t.STRING,followers:t.INTEGER,popularity:t.INTEGER},{freezeTableName:!0})},936:e=>{"use strict";e.exports=(e,t)=>{const s=e.define("Favorite",{songid:t.INTEGER,userid:t.INTEGER,public:t.INTEGER},{indexes:[{unique:!0,fields:["songid","userid"]}]});return s.associate=function(e){s.belongsTo(e.User,{foreignKey:"userid"}),s.belongsTo(e.Song,{foreignKey:"songid"})},s}},567:e=>{"use strict";e.exports=(e,t)=>e.define("Genre",{name:t.STRING,state:t.BOOLEAN})},614:(e,t,s)=>{"use strict";s.d(t,{default:()=>u,formatSequelizeErrors:()=>c});var n=s(517),o=s.n(n);const i=s(496),a=s(626).production,r={};let l;l=a.use_env_variable?new i(process.env[a.use_env_variable],a):new i(a.database,a.username,a.password,a);const d=s(956);d.keys().map(d).forEach((e=>{const t=e(l,i);r[t.name]=t})),Object.keys(r).forEach((e=>{r[e].associate&&r[e].associate(r)})),r.DB=l,r.sequelize=l;const u=r,c=e=>o().map(e,(e=>({path:e.path,key:e.validatorKey,message:e.message})))},941:e=>{"use strict";e.exports=(e,t)=>{const s=e.define("Playlist",{name:{type:t.STRING,allowNull:!1,validate:{notNull:{msg:"validators.playlist.name.notnull"},isUnique(e){const t=this.id,n=this.userid;return s.findOne({where:{name:e,userid:n},transaction:this._validationTransaction}).then((e=>{if(null!==e&&e.id!==t)throw new Error("validators.playlist.name.unique")}))}}},userid:t.INTEGER,public:t.INTEGER});return s.associate=function(e){s.belongsTo(e.User,{foreignKey:"userid"})},s}},806:e=>{"use strict";e.exports=(e,t)=>{const s=e.define("PlaylistSongs",{playlistid:t.INTEGER,index:{type:t.INTEGER,allowNull:!1,validate:{notNull:{msg:"validators.playlist.index.notnull"},isInt:{min:0,msg:"validators.playlist.index.format"}}},songid:{type:t.INTEGER,allowNull:!1,validate:{notNull:{msg:"validators.song.id.notnull"},isInt:{min:1,msg:"validators.song.id.format"},isUnique(e){const t=this.id,n=this.playlistid,o=this.songid;return s.findOne({where:{playlistid:n,songid:o},transaction:this._validationTransaction}).then((e=>{if(null!==e&&e.id!==t)throw new Error("validators.playlistsong.unique")}))}}}});return s.beforeValidate(((e,t)=>(t.transaction&&(e._validationTransaction=t.transaction),e))),s.afterValidate(((e,t)=>{delete e._validationTransaction})),s.associate=function(e){e.Song.belongsToMany(e.Playlist,{as:"Playlists",through:s,foreignKey:"songid"}),e.Playlist.belongsToMany(e.Song,{as:"Songs",through:s,foreignKey:"playlistid"})},s}},818:e=>{"use strict";e.exports=(e,t)=>{const s=e.define("Song",{filepath:t.STRING,filename:t.STRING,title:t.STRING,album:t.STRING,year:t.INTEGER,bitrate:t.INTEGER,duration:t.DOUBLE,samplerate:t.INTEGER,size:t.INTEGER,ino:t.INTEGER,birth:t.DATE},{indexes:[{unique:!0,fields:["filepath","filename"]}]});return s.beforeValidate((e=>{e.filepath&&(e.filepath=e.filepath.replace(/\\/g,"/"))})),s.associate=function(e){s.hasMany(e.SongLog,{as:"SongLogs",foreignKey:"songid"}),s.hasMany(e.Favorite,{as:"Favorites",foreignKey:"songid"})},s}},673:e=>{"use strict";e.exports=(e,t)=>{const s=e.define("SongArtist",{song_id:t.INTEGER,artist_id:t.INTEGER},{indexes:[{unique:!0,fields:["song_id","artist_id"]}]});return s.associate=function(e){e.Song.belongsToMany(e.Artist,{as:"Artists",through:{model:s,unique:!1},foreignKey:"song_id"}),e.Artist.belongsToMany(e.Song,{as:"Songs",through:{model:s,unique:!1},foreignKey:"artist_id"})},s}},829:e=>{"use strict";e.exports=(e,t)=>{const s=e.define("SongGenre",{song_id:t.INTEGER,genre_id:t.INTEGER},{indexes:[{unique:!0,fields:["song_id","genre_id"]}]});return s.associate=function(e){e.Song.belongsToMany(e.Genre,{as:"Genres",through:{model:s,unique:!1},foreignKey:"song_id"}),e.Genre.belongsToMany(e.Song,{as:"Songs",through:{model:s,unique:!1},foreignKey:"genre_id"})},s}},735:e=>{"use strict";e.exports=(e,t)=>{const s=e.define("SongLog",{sessionid:t.STRING(36),songid:t.INTEGER,listenratio:t.FLOAT,origin:t.STRING(10)});return s.associate=function(e){s.belongsTo(e.Song,{foreignKey:"songid"}),s.hasMany(e.SongLogUser,{as:"Votes",foreignKey:"logid"})},s}},498:e=>{"use strict";e.exports=(e,t)=>{const s=e.define("SongLogUser",{logid:t.INTEGER,userid:t.INTEGER,vote:t.INTEGER});return s.associate=function(e){s.belongsTo(e.SongLog,{foreignKey:"logid"}),s.belongsTo(e.User,{foreignKey:"userid"})},s}},729:(e,t,s)=>{"use strict";var n=s(432);e.exports=(e,t)=>{const s=e.define("User",{login:t.STRING,password:t.STRING,name:t.STRING,rights:t.INTEGER});return s.prototype.validPassword=function(e){return n.compareSync(e,this.password)},s.beforeCreate((e=>(void 0!==e.login&&(e.login=e.login.trim()),void 0!==e.name&&(e.name=e.name.trim()),e))),s.afterValidate((e=>{void 0!==e.password&&(e.password=n.hashSync(e.password,n.genSaltSync(10),null))})),s}},956:(e,t,s)=>{var n={"./artist.js":890,"./artistgenre.js":978,"./artistrelated.js":953,"./favorites.js":936,"./genre.js":567,"./playlist.js":941,"./playlistsong.js":806,"./song.js":818,"./songartist.js":673,"./songgenre.js":829,"./songlog.js":735,"./songloguser.js":498,"./user.js":729};function o(e){var t=i(e);return s(t)}function i(e){if(!s.o(n,e)){var t=new Error("Cannot find module '"+e+"'");throw t.code="MODULE_NOT_FOUND",t}return n[e]}o.keys=function(){return Object.keys(n)},o.resolve=i,e.exports=o,o.id=956},432:e=>{"use strict";e.exports=require("bcryptjs")},986:e=>{"use strict";e.exports=require("body-parser")},517:e=>{"use strict";e.exports=require("lodash")},496:e=>{"use strict";e.exports=require("sequelize")},626:e=>{"use strict";e.exports=JSON.parse('{"development":{"dialect":"sqlite","seederStorage":"sequelize","storage":"./pimix.sqlite3","logging":false},"production":{"dialect":"sqlite","storage":"/home/pimix.sqlite3","seederStorage":"sequelize","logging":false}}')},147:e=>{"use strict";e.exports=JSON.parse('{"name":"pimix-data","version":"1.0.8","description":"Pimix REST API from data management","main":"index.js","scripts":{"scanner":"nodemon ./dist/scanner.js","cluster":"nodemon ./dist/pimix-cluster.js","data":"nodemon ./dist/rest.js","wifi":"nodemon ./dist/wifi.js","test":"echo \\"Error: no test specified\\" && exit 1","lint":"eslint \\"src/**/*.js\\" --ignore-pattern node_modules/ ","build":"rm -rf dist && webpack","start":"yarn concurrently -k -n \\"data,scanner,wifi\\" -p \\"[{name}]\\" -c \\"yellow,green,blue\\" \\"yarn data\\" \\"yarn scanner\\" \\"yarn wifi\\""},"repository":{"type":"git","url":"git+https://github.com/vbarrois/pimix-data.git"},"author":"Vincent Barrois","license":"ISC","bugs":{"url":"https://github.com/vbarrois/pimix-data/issues"},"homepage":"https://github.com/vbarrois/pimix-data#readme","dependencies":{"@babel/core":"^7.9.6","@babel/preset-env":"^7.9.6","babel-loader":"^8.1.0","bcryptjs":"^2.4.3","bull":"^3.11.0","child_process":"^1.0.2","chokidar":"^3.5.3","concurrently":"^5.1.0","copy-webpack-plugin":"^10.2.0","eslint":"^6.6.0","eslint-config-standard":"^14.1.0","eslint-loader":"^4.0.2","eslint-plugin-import":"^2.18.2","eslint-plugin-node":"^10.0.0","eslint-plugin-promise":"^4.2.1","eslint-plugin-standard":"^4.0.1","express":"^4.17.1","getmac":"^5.16.0","jimp":"^0.10.0","jsonwebtoken":"^8.5.1","moment":"^2.24.0","music-metadata":"^7.13.3","nodemon":"^1.19.4","recluster":"^1.0.0","sequelize":"^5.21.1","sequelize-cli":"^6.6.0","socket.io-client":"^4.4.1","spotify-web-api-node":"^5.0.2","sqlite3":"^5.0.8","uuid":"^9.0.0","webpack":"^5.75.0","webpack-cli":"^5.0.1","webpack-dev-middleware":"^6.0.1","webpack-hot-middleware":"^2.25.3","webpack-node-externals":"^3.0.0"}}')}},t={};function s(n){var o=t[n];if(void 0!==o)return o.exports;var i=t[n]={exports:{}};return e[n](i,i.exports,s),i.exports}s.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return s.d(t,{a:t}),t},s.d=(e,t)=>{for(var n in t)s.o(t,n)&&!s.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},s.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),s.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},(()=>{"use strict";const e=require("path");var t=s.n(e);const n=require("express");var o=s.n(n),i=s(614),a=s(496),r=s.n(a);const l=o().Router();l.post("/api/login",((e,t)=>{i.default.User.findOne({where:r().where(r().fn("lower",r().col("login")),r().fn("lower",e.body.login))}).then((s=>s?s.validPassword(e.body.password)?t.status(200).send({connected:!0,user:d(s)}):t.status(200).send({connected:!1,message:"Incorrect password."}):t.status(200).send({connected:!1,message:"Incorrect login."})))})),l.post("/api/pseudo",((e,t)=>{i.default.User.findOrCreate({where:r().where(r().fn("lower",r().col("login")),r().fn("lower",e.body.login)),defaults:{login:e.body.login,rights:0}}).then((e=>{const s=d(e[0].dataValues);return s?t.status(200).send({connected:!0,user:s}):t.status(200).send({connected:!1,message:"Incorrect pseudo."})}))}));const d=e=>({id:e.id,login:e.login,username:e.name,rights:e.rights}),u=l;var c=s(517),p=s.n(c);o().Router();const g={attributes:["id","filepath","filename","title","album","year","duration","bitrate","birth","ino","size","samplerate","createdAt","updatedAt"],include:[{model:i.default.Artist,as:"Artists",attributes:["id","name"],required:!1,through:{attributes:[]}},{model:i.default.Genre,as:"Genres",attributes:["id","name"],required:!1,through:{attributes:[]}},{model:i.default.Playlist,attributes:["id","name"],as:"Playlists"},{model:i.default.Favorite,attributes:["id","userid"],as:"Favorites",required:!1},{model:i.default.SongLog,as:"SongLogs",attributes:[],include:[{model:i.default.SongLogUser,as:"Votes",attributes:[]}]}]},S="(AVG(SL.listenratio)*2-.4)*(1-1.0/(COUNT(SL.id)+2))",y=(r().fn("MAX",r().col("SongLogs.createdAt")),r().fn("COUNT",r().col("SongLogs.id")),r().fn("SUM",r().col("SongLogs.Votes.vote")),r().fn("AVG",r().col("SongLogs.listenratio")),i.default.SongLog,i.default.SongLogUser,e=>(b(e),`\n    SELECT\n      SONGSTATS.id,\n      SONGSTATS.filename,\n      SONGSTATS.filepath,\n      SONGSTATS.duration,\n      SONGSTATS.lastplaymin,\n      SONGSTATS.lastplaydate,\n      SONGSTATS.playcount,\n      SONGSTATS.listenratio,\n      SONGSTATS.votepoints,\n      SONGSTATS.likescore,\n      SONGSTATS.birthdate,\n      SONGSTATS.year,\n      MAX(A.followers) AS followers,\n      MAX(A.popularity) AS popularity,\n      SONGSTATS.likecount,\n      SONGSTATS.genreplaycount,\n      SONGSTATS.genrelistenratio,\n      SONGSTATS.genrevotepoints,\n      SONGSTATS.genrelikescore\n    FROM (\n      ${h(e)}\n    ) SONGSTATS, SongArtists SA\n    LEFT JOIN Artists A ON A.id= SA.artist_id\n    WHERE SA.song_id = SONGSTATS.id\n    ${f(e)}\n    ${T(e)}\n    GROUP BY SONGSTATS.id\n    ${A(e)}\n    ${E(e)}\n  `)),h=e=>`\n    SELECT \n      S.id,\n      S.filename,\n      S.filepath,\n      S.duration,\n      S.album,\n      A.name,\n      (JULIANDAY(datetime('now')) - JULIANDAY(MAX(SL.createdAt))) * 24 * 60 AS lastplaymin,\n      MAX(SL.createdAt) AS lastplaydate,\n      COUNT(SL.id) AS playcount, \n      AVG(SL.listenratio) AS listenratio, \n      SUM(SLU.vote) as votepoints, \n      ${S} AS likescore,\n      S.birth AS birthdate,\n      S.year AS year,\n      COUNT(DISTINCT(F.id)) AS likecount,\n      GENRES_STATS.playcount AS genreplaycount,\n      GENRES_STATS.listenratio AS genrelistenratio,\n      GENRES_STATS.votepoints AS genrevotepoints,\n      GENRES_STATS.likescore AS genrelikescore,\n      ${!p().isNil(e.activeSong)&&e.activeSong.year>0?`ABS(S.year - ${e.activeSong.year}) AS yeardelta`:"0 AS yeardelta"}\n    FROM Songs S, SongGenres SG, Genres G, SongArtists SA, Artists A\n    LEFT JOIN Favorites F ON F.songid = S.id ${p().isNil(e.userids)?"":`AND F.userid in (${e.userids.join(",")})`}\n    LEFT JOIN SongLogs SL ON SL.songid = S.id\n    LEFT JOIN SongLogUsers SLU ON SLU.logid = SL.id\n    LEFT JOIN (${m()}) GENRES_STATS ON GENRES_STATS.genre_id = SG.genre_id\n    WHERE SG.song_id = S.id\n    AND SG.genre_id = G.id\n    AND SA.song_id = S.id\n    AND SA.artist_id = A.id\n    ${p().isNil(e.removeDisabledGenres)||1!==e.removeDisabledGenres?"":"AND G.state = 1"}\n    ${!p().isNil(e.songids)&&e.songids.length>0?`AND S.id IN (${e.songids.join(",")})`:""}\n    ${!p().isNil(e.genreids)&&e.genreids.length>0?`AND SG.genre_id IN (${e.genreids.join(",")})`:""}\n    ${!p().isNil(e.artistids)&&e.artistids.length>0?`AND SA.artist_id IN (${e.artistids.join(",")})`:""}\n    ${!p().isNil(p().get(e,"period.from"))&&e.period.from>0?`AND S.year >= ${e.period.from}`:""}\n    ${!p().isNil(p().get(e,"period.to"))&&e.period.to>0?`AND S.year <= ${e.period.to}`:""}\n    ${!p().isNil(e.sincehours)&&parseInt(e.sincehours)>0?`AND (JULIANDAY(datetime('now')) - JULIANDAY(SL.createdAt)) * 24 < ${e.sincehours}`:""}\n    GROUP BY S.id`,f=e=>{const t=_[e.sortKey];return p().isNil(p().get(t,"condition"))?"":p().map(t.condition,(e=>`AND ${e}`))},A=e=>{const t=_[e.sortKey];return p().isNil(p().get(t,"order"))?"":`ORDER BY ${t.order.join(", ")}`},m=()=>`\n    SELECT\n      SG.genre_id,\n      COUNT(SL.id) AS playcount, \n      AVG(SL.listenratio) AS listenratio, \n      SUM(SLU.vote) as votepoints, \n      ${S} AS likescore\n    FROM Songs S, SongGenres SG\n    LEFT JOIN SongLogs SL ON SL.songid = S.id\n    LEFT JOIN SongLogUsers SLU ON SLU.logid = SL.id\n    WHERE SG.song_id = S.id\n    GROUP by SG.genre_id`,T=e=>!p().isNil(e.notplayedsinceminutes)&&e.notplayedsinceminutes>0?`\n      AND SONGSTATS.id NOT IN (\n        SELECT songid FROM SongLogs\n        WHERE (JULIANDAY(datetime('now')) - JULIANDAY(createdAt)) * 24 * 60 < ${e.notplayedsinceminutes}\n      )\n    `:"",E=e=>!p().isNil(e.limit)&&parseInt(e.limit)>0?`LIMIT 0, ${e.limit}`:"",N=(e,t)=>p().isNil(t.shake)||!0!==t.shake?e:`\n    SELECT * FROM (${e}) ORDER BY RANDOM()`,_={shuffle:{order:["RANDOM()"]},favorites:{condition:["likecount > 0"],order:["likecount DESC","playcount DESC","birthdate DESC"]},mostplayed:{condition:["playcount > 0"],order:["playcount DESC","birthdate DESC"]},lessplayed:{condition:["playcount > 0"],order:["playcount ASC","birthdate DESC"]},bestlisten:{condition:["listenratio > 0"],order:["listenratio DESC","playcount DESC","birthdate DESC"]},poorlisten:{condition:["listenratio > 0"],order:["listenratio ASC","playcount ASC","birthdate DESC"]},lastadded:{order:["birthdate DESC"]},firstadded:{order:["birthdate ASC"]},mostrecent:{order:["year DESC"]},oldest:{order:["year ASC"]},bestvotes:{order:["votepoints DESC","playcount DESC","birthdate DESC"]},followers:{order:["followers DESC","playcount DESC","birthdate DESC"]},popularity:{order:["popularity DESC","playcount DESC","birthdate DESC"]},safelike:{order:["likescore DESC","yeardelta ASC","birthdate DESC"]},discover:{condition:["genrelikescore > 1"],order:["playcount ASC","yeardelta ASC","birthdate DESC"]},probablynotliked:{condition:["genrelikescore <= 1"],order:["playcount ASC","yeardelta ASC","birthdate DESC"]},forgot:{order:["playcount ASC","listenratio ASC","birthdate DESC"]}},b=e=>{console.log("------------------------------------------------------------------------------------"),console.log(`Request song library mode [${e.sortKey}]`),!p().isNil(e.keywords)&&e.keywords.length>0&&console.log(`  * Recherche des mots clés: [${e.keywords}]`),!p().isNil(e.notplayedsinceminutes)&&e.notplayedsinceminutes>0&&console.log(`  * Pas écouté depuis ${e.notplayedsinceminutes} minutes`),p().isNil(p().get(e,"period.from"))||console.log(`  * après ${e.period.from}`),p().isNil(p().get(e,"period.to"))||console.log(`  * avant ${e.period.from}`),!p().isNil(e.songids)&&e.songids.length>0&&console.log(`  * Uniquement les titres selectionés [${e.songids.join(",")}]`),!p().isNil(e.genreids)&&e.genreids.length>0&&console.log(`  * Uniquement les genres selectionés [${e.genreids.join(",")}]`),!p().isNil(e.artistids)&&e.artistids.length>0&&console.log(`  * Uniquement les artistes selectionés [${e.artistids.join(",")}]`),p().isNil(e.removeDisabledGenres)||1!==e.removeDisabledGenres||console.log("  * Uniquement les genres actifs"),!p().isNil(e.userids)&&e.userids.length>0&&console.log(`  * Mode mes favoris avec les users [${e.userids.join(",")}]`),!p().isNil(e.activeSong)&&e.activeSong.year>0&&console.log(`  * Titre actif ${e.activeSong.filename}; année ${e.activeSong.year}`),!p().isNil(e.sincehours)&&parseInt(e.sincehours)>0&&console.log(`  * Statistiques calculées sur les ${e.sincehours} dernières heures`),!p().isNil(e.limit)&&parseInt(e.limit)>0&&console.log(`  * Limiter les résultats aux ${e.limit} premiers`),p().isNil(e.shake)||!0!==e.shake||console.log("  * Tirage au sort des résultats"),console.log("------------------------------------------------------------------------------------")},G=require("jimp");var C=s.n(G);const O=o().Router(),R=(e=null)=>`SELECT \n      G.id, \n      G.name, \n      G.state, \n      COUNT(DISTINCT(SG.song_id)) AS songscount, \n      MIN(S.year) AS yearfrom, \n      MAX(S.year) AS yearto, \n      COUNT(SL.id) AS playcount, \n      COUNT(DISTINCT(F.id)) AS likecount, \n      AVG(SL.listenratio) AS listenratio, \n      MAX(SL.createdAt) AS lastplayed,\n      ${S} AS likescore\n    FROM SongGenres SG, Genres G, Songs S \n    LEFT JOIN Favorites F ON F.songid = S.id \n    LEFT JOIN SongLogs SL ON SL.songid = S.id \n    LEFT JOIN SongLogUsers SLU ON SLU.logid = SL.id \n    WHERE SG.genre_id = G.id \n    AND SG.song_id = S.id \n    ${!p().isNil(e)&&e.length>0?`AND G.id IN (${e.join(",")})`:""}\n    GROUP BY G.id`;O.get("/api/genres",((e,t)=>{t.header("Content-Type","application/json; charset=utf-8"),i.default.DB.query(R(),{type:r().QueryTypes.SELECT}).then((e=>{const s=p().map(e,(e=>L(e)));t.status(200).json(s)})).catch((e=>{t.status(500).send(e)}))})),O.get("/api/genre/:id",((e,t)=>{t.header("Content-Type","application/json; charset=utf-8"),i.default.DB.query(R([e.params.id]),{type:r().QueryTypes.SELECT}).then((e=>{t.status(200).json(L(e[0]))})).catch((e=>{t.status(500).send(e)}))})),O.post("/api/genre/byids",((e,t)=>{t.header("Content-Type","application/json; charset=utf-8"),i.default.DB.query(R(e.body),{type:r().QueryTypes.SELECT}).then((e=>{t.status(200).json(p().map(e,(e=>L(e))))})).catch((e=>{t.status(500).send(e)}))})),O.post("/api/genres/state",((e,t)=>{t.header("Content-Type","application/json; charset=utf-8");const s=e.body.genreid,n="UPDATE Genres SET state = "+e.body.state+" WHERE id = "+s;i.default.DB.query(n,{type:r().QueryTypes.UPDATE}).then((()=>{t.status(200).end()})).catch((e=>{t.status(500).send(e)}))})),O.post("/api/genres/switch",((e,t)=>{t.header("Content-Type","application/json; charset=utf-8");const s=e.body.genreid,n=e.body.condition,o="UPDATE Genres SET state = "+("only"===n?0:1),a="UPDATE Genres SET state = "+("only"===n?1:0)+" WHERE id = "+s;i.default.DB.query(o,{type:r().QueryTypes.UPDATE}).then((()=>i.default.DB.query(a,{type:r().QueryTypes.UPDATE}))).then((()=>{t.status(200).end()})).catch((e=>{console.log(e),t.status(500).send(e)}))}));const L=e=>({id:e.id,name:e.name,state:parseInt(e.state),songscount:parseInt(e.songscount),yearfrom:parseInt(e.yearfrom),yearto:parseInt(e.yearto),playcount:parseInt(e.playcount||0),listenratio:parseFloat(e.listenratio||0),likescore:parseFloat(e.likescore||0),likecount:parseInt(e.likecount||0),lastplayed:e.lastplayed,createdAt:e.createdAt,updatedAt:e.updatedAt}),I=O,v=o().Router(),D=(e=null)=>`SELECT\n      A.id,\n      A.name,\n      A.spotifyId,\n      A.followers,\n      A.popularity,\n      A.state,\n      COUNT(DISTINCT(SA.song_id)) AS songscount,\n      MIN(S.year) AS yearfrom,\n      MAX(S.year) AS yearto,\n      COUNT(DISTINCT(F.id)) AS likecount, \n      AVG(SL.listenratio) AS listenratio,\n      SUM(SLU.vote) AS votepoints,\n      COUNT(SL.id) AS playcount,\n      ${S} AS likescore\n    FROM SongArtists SA, Artists A, Songs S\n    LEFT JOIN Favorites F ON F.songid = S.id \n    LEFT OUTER JOIN SongLogs SL ON SL.songid = S.id\n    LEFT OUTER JOIN SongLogUsers SLU ON SLU.logid = SL.id\n    WHERE SA.artist_id = A.id\n    AND SA.song_id = S.id\n    ${!p().isNil(e)&&e.length>0?`AND A.id IN (${e.join(",")})`:""}\n    GROUP BY A.id`;v.get("/api/artists",((e,t)=>{t.header("Content-Type","application/json; charset=utf-8"),i.default.DB.query(D(),{type:r().QueryTypes.SELECT}).then((e=>{t.status(200).json(e)})).catch((e=>{t.status(500).send(e)}))})),v.get("/api/artist/:id",((e,t)=>{t.header("Content-Type","application/json; charset=utf-8"),i.default.DB.query(D([e.params.id]),{type:r().QueryTypes.SELECT}).then((e=>{t.status(200).json(w(e[0]))})).catch((e=>{t.status(500).send(e)}))})),v.post("/api/artist/byids",((e,t)=>{t.header("Content-Type","application/json; charset=utf-8"),i.default.DB.query(D(e.body),{type:r().QueryTypes.SELECT}).then((e=>{t.status(200).json(e)})).catch((e=>{t.status(500).send(e)}))})),v.post("/api/artists/state",((e,t)=>{t.header("Content-Type","application/json; charset=utf-8");const s=e.body.artistid,n="UPDATE Artists SET state = "+e.body.state+" WHERE id = "+s;i.default.DB.query(n,{type:r().QueryTypes.UPDATE}).then((()=>{t.status(200).end()})).catch((e=>{t.status(500).send(e)}))})),v.post("/api/artists/switch",((e,t)=>{t.header("Content-Type","application/json; charset=utf-8");const s=e.body.artistid,n=e.body.condition,o="UPDATE Artists SET state = "+("only"===n?0:1),a="UPDATE Artists SET state = "+("only"===n?1:0)+" WHERE id = "+s;i.default.DB.query(o,{type:r().QueryTypes.UPDATE}).then((()=>i.default.DB.query(a,{type:r().QueryTypes.UPDATE}))).then((()=>{t.status(200).end()})).catch((e=>{console.log(e),t.status(500).send(e)}))}));const w=e=>({id:e.id,name:e.name,state:e.state,spotifyId:e.spotifyId,popularity:e.popularity,followers:e.followers,playcount:e.playcount,listenratio:e.listenratio,likescore:e.likescore,likecount:parseInt(e.likecount||0),songscount:e.songscount,createdAt:e.createdAt,updatedAt:e.updatedAt}),U=v,j=o().Router(),q=process.env.COVER_FOLDER||"/home/covers";function P(e,s){return new Promise(((n,o)=>{i.default.Song.findOne({where:{id:e}}).then((e=>{const i=q+(s?"/thumbs/":"/")+t().parse(e.filename).name+".jpg";C().read(i).then((e=>{e.getBuffer(C().MIME_JPEG,((e,t)=>{e?o(e):n(t)}))})).catch((e=>{o(e)}))})).catch((e=>{o(e)}))}))}j.post("/api/songs/fromids",((e,t)=>{t.header("Content-Type","application/json; charset=utf-8");const s=p().map(e.body.ids.split(","),(e=>parseInt(e)));i.default.Song.findAll({where:{id:s}}).then((e=>{const s=p().map(e,(e=>({song:$(e)})));t.send(s)})).catch((e=>(console.log(`There was an error querying songs from ids ${s}`,JSON.stringify(e)),t.status(500).send(e))))})),j.post("/api/songs/all",((e,t)=>{t.header("Content-Type","application/json; charset=utf-8");const s=e.body;i.default.DB.query(N(y(s),s),{type:a.Sequelize.QueryTypes.SELECT}).then((e=>{t.send(e)})).catch((e=>(console.log("There was an error querying songs",JSON.stringify(e)),t.status(500).send(e))))})),j.post("/api/song/info/:id",((e,t)=>{t.header("Content-Type","application/json; charset=utf-8"),Promise.all([i.default.Song.findOne({where:{id:e.params.id},...g}),i.default.DB.query(y({songids:[e.params.id]}),{type:a.Sequelize.QueryTypes.SELECT})]).then((e=>{const s=$({...e[0].dataValues,...e[1][0]});t.send(s)})).catch((s=>(console.log(`There was an error querying song ${e.params.id}`,JSON.stringify(s)),t.status(500).send(s))))})),j.get("/api/song/thumb/:id",((e,t)=>{P(e.params.id,!0).then((e=>{t.set("Content-Type",C().MIME_JPEG),t.status(200).send(e)})).catch((e=>{console.log(e),t.status(500).end()}))})),j.get("/api/song/cover/:id",((e,t)=>{P(e.params.id,!1).then((e=>{t.set("Content-Type",C().MIME_JPEG),t.status(200).send(e)})).catch((e=>{console.log(e.toString()),t.status(500).end()}))})),j.get("/api/songs/last/:count",((e,t)=>{t.header("Content-Type","application/json; charset=utf-8"),i.default.Song.findAll({limit:e.params.count,order:[["createdAt","desc"]],include:[{model:i.default.Genre,as:"Genres"},{model:i.default.Artist,as:"Artists"},{model:i.default.Playlist,attributes:["id","name"],as:"Playlists"}]}).then((e=>t.send(e))).catch((s=>(console.log(`There was an error querying last songs (${e.params.count})`,s.toString()),t.status(500).send(s))))})),j.get("/api/songs/genre/:genre",((e,t)=>{t.header("Content-Type","application/json; charset=utf-8"),i.default.Song.findAll({where:{"$Genres.id$":e.params.genre.split(",")},include:[{model:i.default.Genre,as:"Genres",required:!1},{model:i.default.Artist,as:"Artists",required:!1},{model:i.default.Playlist,attributes:["id","name"],as:"Playlists"}]}).then((e=>t.send(e))).catch((e=>(console.log("There was an error querying songs",JSON.stringify(e)),t.status(500).send(e))))})),j.get("/api/songs/artist/:artistids",((e,t)=>{t.header("Content-Type","application/json; charset=utf-8"),i.default.Song.findAll({where:{"$Artists.id$":e.params.artistids.split(",")},include:[{model:i.default.Genre,as:"Genres",required:!1},{model:i.default.Artist,as:"Artists",required:!1},{model:i.default.Playlist,attributes:["id","name"],as:"Playlists"}]}).then((e=>t.send(e))).catch((e=>(console.log("There was an error querying songs",JSON.stringify(e)),t.status(500).send(e))))}));const $=e=>({id:e.id,filepath:e.filepath,filename:e.filename,title:e.title,album:e.album,year:e.year,bitrate:e.bitrate,duration:e.duration,samplerate:e.samplerate,size:e.size,ino:e.ino,birth:e.birth,createdAt:e.createdAt,updatedAt:e.updatedAt,Genres:p().map(e.Genres,(e=>L(e))),Artists:p().map(e.Artists,(e=>w(e))),Playlists:p().map(e.Playlists,(e=>({id:e.id,name:e.name}))),Favorites:p().map(e.Favorites,(e=>({id:e.id,userid:e.userid}))),playcount:e.playcount,votepoints:e.votepoints,lastplayed:e.lastplayed,listenratio:e.listenratio,likecount:e.likecount,likescore:p().round(e.likescore,2)}),k=j,M=o().Router();M.get("/api/genius/list",((e,t)=>{t.header("Content-Type","application/json; charset=utf-8");const s=p().map(p().keys(_),(e=>({key:e,title:`genius.${e}`})));return t.status(200).send(s)})),M.post("/api/genius/next",((e,t)=>{t.header("Content-Type","application/json; charset=utf-8");let s=e.body.nextmode;const n=e.body.notplayedsince,o=e.body.current,a=e.body.userids;let l=((e,t=240,s=[])=>({sortKey:e,notplayedsinceminutes:t,userids:s,removeDisabledGenres:1,shake:!0,limit:4}))(s,n,a);p().isNil(o)||(l=p().merge(l,{activeSong:o})),i.default.DB.query(N(y(l),l),{type:r().QueryTypes.SELECT}).then((e=>e.length>0?e:(s="shuffle",i.default.DB.query(N(y({sortKey:s,userids:l.userids,limit:1}),l),{type:r().QueryTypes.SELECT})))).then((e=>{return t=e[0].id,new Promise(((e,s)=>i.default.Song.findOne({where:{id:t},...g}).then((t=>{e(t)})).catch(s)));var t})).then((e=>t.status(200).send({origin:s,song:e}))).catch((e=>(console.log(`There was an error querying ${s} next`,l),t.status(500).send(e))))}));const F=M,x=e=>({id:e.id,filepath:e.filepath,filename:e.filename,title:e.title,album:e.album,year:e.year,bitrate:e.bitrate,duration:e.duration,samplerate:e.samplerate,size:e.size,ino:e.ino,birth:e.birth,createdAt:e.createdAt,updatedAt:e.updatedAt}),B=s(417),H=o().Router();H.post("/api/log/songplayed",((e,t)=>{t.header("Content-Type","application/json; charset=utf-8");const s=e.body.item,n=e.body.sessionid,o=e.body.item.origin;null!==s&&null!==s.song&&B.addSongLog({sessionid:n,songid:s.song.id,origin:o}).then((e=>{const t=e.dataValues,n=[];return p().forEach(s.votes,(e=>{const s={logid:t.id,userid:e.userid,vote:e.points};n.push(B.addSongUserLog(s))})),new Promise(((e,s)=>{Promise.all(n).then(e(t)).catch(s)}))})).then((e=>t.status(200).send(e))).catch((e=>(console.log("Cannot create song logs",JSON.stringify(e)),t.status(500).send(e))))})),H.post("/api/log/songcomplete",((e,t)=>{t.header("Content-Type","application/json; charset=utf-8");const s=e.body.id,n=e.body.listenratio;B.updateSongLog({id:s,listenratio:n}).then((()=>t.status(200).end())).catch((e=>(console.log("Cannot update song logs",JSON.stringify(e)),t.status(500).send(e))))})),H.get("/api/log/mostplayed/:count",((e,t)=>{t.header("Content-Type","application/json; charset=utf-8"),i.default.SongLog.findAll({group:["songid"],attributes:["songid",[r().fn("COUNT","songid"),"PlayCount"]],limit:e.params.count,order:[[r().literal("PlayCount"),"desc"]],include:[{model:i.default.Song,as:"Song"}]}).then((e=>{const s=p().map(e,(e=>({count:e.dataValues.PlayCount,...x(e.Song)})));t.status(200).send(s)})).catch((s=>(console.log(`There was an error querying most played songs (${e.params.count})`,s.toString()),t.status(500).send(s))))})),H.get("/api/log/mostswipped/:count",((e,t)=>{t.header("Content-Type","application/json; charset=utf-8"),i.default.SongLog.findAll({group:["songid"],attributes:["songid",[r().fn("AVG",r().col("listenratio")),"PlayRatio"]],limit:e.params.count,where:{listenratio:{[a.Op.ne]:null}},order:[[r().literal("PlayRatio"),"asc"]],include:[{model:i.default.Song,as:"Song"}]}).then((e=>{const s=p().map(e,(e=>({playratio:e.dataValues.PlayRatio,...x(e.Song)})));t.status(200).send(s)})).catch((s=>(console.log(`There was an error querying most swipped songs (${e.params.count})`,s.toString()),t.status(500).send(s))))})),H.get("/api/log/mostlistened/:count",((e,t)=>{t.header("Content-Type","application/json; charset=utf-8"),i.default.SongLog.findAll({group:["songid"],attributes:["songid",[r().fn("AVG",r().col("listenratio")),"PlayRatio"]],limit:e.params.count,where:{listenratio:{[a.Op.ne]:null}},order:[[r().literal("PlayRatio"),"desc"]],include:[{model:i.default.Song,as:"Song"}]}).then((e=>{const s=p().map(e,(e=>({playratio:e.dataValues.PlayRatio,...x(e.Song)})));t.status(200).send(s)})).catch((s=>(console.log(`There was an error querying most listened songs (${e.params.count})`,s.toString()),t.status(500).send(s))))})),H.get("/api/log/lastplayed/:count",((e,t)=>{t.header("Content-Type","application/json; charset=utf-8"),i.default.SongLog.findAll({limit:e.params.count,order:[["createdAt","desc"]],include:[{model:i.default.Song,as:"Song"}]}).then((e=>{const s=p().map(e,(e=>({playedDate:e.dataValues.createdAt,...x(e.Song)})));t.status(200).send(s)})).catch((s=>(console.log(`There was an error querying last played songs (${e.params.count})`,s.toString()),t.status(500).send(s))))}));const J=H,K=o().Router();K.post("/api/search",((e,t)=>{t.header("Content-Type","application/json; charset=utf-8");const s=e.body.keywords,n=p().filter(p().map(s.replace(/\s\s+/g," ").trim().split(" "),(e=>e.replace("'","''").replace("+"," "))),(e=>e.length>2));console.debug(`Searching for [${n}]`);const o=[];o.push(i.default.DB.query(V(n),{type:r().QueryTypes.SELECT})),o.push(i.default.DB.query(z(n),{type:r().QueryTypes.SELECT})),o.push(i.default.DB.query(Y(n),{type:r().QueryTypes.SELECT})),Promise.all(o).then((([e,s,o])=>{console.log(` = results: ${o.length} tracks, ${e.length} artists, ${s.length} genres`),t.send({keywords:n,songs:p().orderBy(o,["precision","artistcount","genrecount"],["desc","desc","desc"]),artists:e,genres:s})})).catch((e=>(console.log(`There was an error querying search: ${s}`,JSON.stringify(e)),t.status(500).send(e))))}));const V=e=>`\n    SELECT\n      SUM(SEARCH.precision) as precision,\n      SEARCH.id,\n      SEARCH.name\n    FROM\n      (${p().map(e,(e=>`SELECT \n      A.id AS id, \n      CASE\n        WHEN UPPER(A.name) = '${e.toUpperCase()}' THEN 2\n        ELSE 1\n      END precision,\n      A.name\n    FROM Artists A\n    WHERE \n      A.name LIKE '%${e}%'\n    GROUP BY A.id`)).join(" UNION ALL ")}) SEARCH\n    GROUP BY SEARCH.id\n  `,z=e=>`\n    SELECT\n      SUM(SEARCH.precision) as precision,\n      SEARCH.id,\n      SEARCH.name\n    FROM\n      (${p().map(e,(e=>`SELECT \n      G.id AS id, \n      CASE\n        WHEN UPPER(G.name) = '${e.toUpperCase()}' THEN 2\n        ELSE 1\n      END precision,\n      G.name\n    FROM Genres G, SongGenres SG\n    WHERE \n      SG.genre_id = G.id\n      AND G.name LIKE '%${e}%'\n    GROUP BY G.id`)).join(" UNION ALL ")}) SEARCH\n    GROUP BY SEARCH.id\n  `,Y=e=>`\n    SELECT\n      id,\n      SUM(precision) as precision,\n      title,\n      album\n      year\n    FROM (\n      SELECT\n        OCC.songid as id,\n        OCC.precision,\n        OCC.title,\n        OCC.album,\n        OCC.year\n      FROM (SELECT \n    SEARCH.songid AS songid,\n    COUNT(SEARCH.songid) as precision,\n    SEARCH.title,\n    SEARCH.album,\n    SEARCH.year\n    FROM (${p().map(e,(e=>`SELECT \n      S.id AS songid, \n      S.title,\n      S.album,\n      S.year\n    FROM Songs S\n    WHERE \n      ${Q(e)}\n    `)).join(" UNION ALL ")}) SEARCH\n    GROUP BY songid) OCC\n      \n      UNION ALL\n\n      SELECT\n        S.id AS id,\n        A.precision as precision,\n        S.title AS title,\n        S.album AS album,\n        S.year AS year\n      FROM Songs S, SongArtists SA, (${V(e)}) A\n      WHERE SA.artist_id = A.id\n      AND SA.song_id = S.id\n      \n      UNION ALL\n\n      SELECT\n        S.id AS id,\n        G.precision as precision,\n        S.title AS title,\n        S.album AS album,\n        S.year AS year\n      FROM Songs S, SongGenres SG, (${z(e)}) G\n      WHERE SG.genre_id = G.id\n      AND SG.song_id = S.id\n    ) GROUP BY id`,Q=e=>{const t=W(e),s=X(e),n=Z(e);let o="";return t.length>0&&(o+=(o.length>0?" OR ":"")+`(${t})`),s.length>0&&(o+=(o.length>0?" OR ":"")+`(${s})`),n.length>0&&(o+=(o.length>0?" OR ":"")+`(${n})`),o},W=e=>`S.title LIKE '%${e}%'`.trim(),X=e=>`S.album LIKE '%${e}%'`.trim(),Z=e=>{const t=parseInt(e);return(p().isNaN(t)?"":`S.year = ${t}`).trim()},ee=K,te=(e,t)=>i.default.PlaylistSongs.create(e,{transaction:t}),se=(e,t)=>i.default.PlaylistSongs.destroy({where:e,transaction:t}),ne=o().Router();ne.post("/api/playlists",((e,t)=>{t.header("Content-Type","application/json; charset=utf-8"),i.default.Playlist.findAll({include:[{model:i.default.User,attributes:["id","name"],as:"User"},{model:i.default.Song,attributes:["id"],as:"Songs",through:{attributes:["index"]}}],order:[[a.Sequelize.fn("lower",a.Sequelize.col("Playlist.name")),"ASC"]],where:{userid:e.body.userid}}).then((e=>t.send(e))).catch((e=>(console.log("There was an error querying playlists",JSON.stringify(e)),t.status(500).send(e))))})),ne.get("/api/playlist/:id",((e,t)=>{t.header("Content-Type","application/json; charset=utf-8");const s=e.params.id;i.default.Playlist.findOne({where:{id:s},include:[{model:i.default.User,attributes:["id","name"],as:"User"},{model:i.default.Song,as:"Songs",through:{attributes:["index"]},include:[{model:i.default.Genre,as:"Genres",through:{attributes:[]}},{model:i.default.Artist,as:"Artists",through:{attributes:[]}}],order:[["index","asc"]]}]}).then((e=>t.send(oe(e)))).catch((e=>(console.log(e),console.log(`There was an error querying playlist ${s}`,JSON.stringify(e)),t.status(500).send(e))))})),ne.put("/api/playlist",((e,t)=>{t.header("Content-Type","application/json; charset=utf-8");const s=e.body;var n;(n=s,n.id>0?i.default.Playlist.update(n,{where:{id:n.id}}):i.default.Playlist.create(n)).then((e=>{console.log("save or update playlist",e),t.status(200).send({success:!0,object:oe(e)})})).catch((e=>{t.status(200).send({success:!1,object:s,errors:(0,i.formatSequelizeErrors)(e.errors)})}))})),ne.delete("/api/playlist",((e,t)=>{t.header("Content-Type","application/json; charset=utf-8"),console.log("delete playlist",e.body.id);const s={id:e.body.id};(e=>i.default.Playlist.destroy({where:e}))(s).then((()=>t.send(s))).catch((e=>(console.log("There was an error deleting playlist",JSON.stringify(e)),t.status(500).send(e))))}));const oe=e=>({id:e.id,name:e.name,userid:e.userid,public:e.public,OrderedSongs:p().map(e.Songs,(e=>({index:e.PlaylistSongs.index,song:$(e)}))),createdAt:e.createdAt,updatedAt:e.updatedAt});ne.put("/api/playlistsong",((e,t)=>{t.header("Content-Type","application/json; charset=utf-8");const s=e.body;return i.default.DB.transaction((async e=>i.default.PlaylistSongs.findOne({where:{playlistid:s.playlistid},attributes:[[r().fn("COUNT",r().col("songid")),"nbsongs"]],transaction:e,raw:!0}).then((t=>(console.log(t.nbsongs),te({...s,index:t.nbsongs},e)))).then((e=>{t.status(200).send({success:!0,object:ie(e)})})).catch((e=>{t.status(200).send({success:!1,object:s,errors:p().map(e.errors,(e=>({path:e.path,key:e.validatorKey,message:e.message})))})}))))})),ne.put("/api/playlistsongorder",((e,t)=>{t.header("Content-Type","application/json; charset=utf-8");const s=e.body,n=s.playlistid,o=s.songsorder;return i.default.DB.transaction((async e=>se({playlistid:n},e).then((()=>{const t=p().map(o,(t=>{const s={...t,playlistid:n};return console.log("add",s),te(s,e)}));return Promise.all(t)})).then((e=>{console.log("done"),t.status(200).send({success:!0,object:p().map(e,ie)})})).catch((e=>{t.status(200).send({success:!1,object:s,errors:p().map(e.errors,(e=>({path:e.path,key:e.validatorKey,message:e.message})))})}))))})),ne.delete("/api/playlistsong",((e,t)=>{t.header("Content-Type","application/json; charset=utf-8");const s=e.body;return i.default.DB.transaction((async e=>{se(s,e).then((()=>{t.status(200).send({success:!0,object:ie(s)})})).catch((e=>{t.status(200).send({success:!1,object:s,errors:(0,i.formatSequelizeErrors)(e.errors)})}))}))}));const ie=e=>({id:e.id,playlistid:e.playlistid,songid:e.songid,createdAt:e.createdAt,updatedAt:e.updatedAt}),ae=ne,re=o().Router();re.put("/api/favoritesong",((e,t)=>{t.header("Content-Type","application/json; charset=utf-8");const s=e.body;return i.default.DB.transaction((async e=>{return t={songid:s.songid,userid:s.userid},n=e,i.default.Favorite.create(t,{transaction:n});var t,n})).then((e=>{t.status(200).send({success:!0,object:e})})).catch((e=>{t.status(200).send({success:!1,object:s,errors:p().map(e.errors,(e=>({path:e.path,key:e.validatorKey,message:e.message})))})}))})),re.delete("/api/favoritesong",((e,t)=>{t.header("Content-Type","application/json; charset=utf-8");const s=e.body;return i.default.DB.transaction((async e=>{var n,o;(n=s,o=e,i.default.Favorite.destroy({where:n,transaction:o})).then((()=>{t.status(200).send({success:!0,object:le(s)})})).catch((e=>{t.status(200).send({success:!1,object:s,errors:(0,i.formatSequelizeErrors)(e.errors)})}))}))}));const le=e=>({id:e.id,songid:e.songid,userid:e.userid,createdAt:e.createdAt,updatedAt:e.updatedAt}),de=re,ue=o().Router();ue.post("/api/year",((e,t)=>{var s=e.body.song.year;t.header("Content-Type","application/json; charset=utf-8"),i.default.Song.findAll({attributes:["id","filepath","filename","title","album","year","duration"],where:{year:s},include:[{model:i.default.Artist,as:"Artists",attributes:["id","name"],required:!1,through:{attributes:[]}},{model:i.default.Genre,as:"Genres",attributes:["id","name"],required:!1,through:{attributes:[]}}]}).then((e=>t.send(e))).catch((e=>(console.log("There was an error querying songs",JSON.stringify(e)),t.status(500).send(e))))}));const ce=ue,pe=s(147),ge=process.env.SERVERPORT||81;console.log("__________.__        .__         _____________________ ____________________"),console.log("\\______   \\__| _____ |__|__  ___ \\______   \\_   _____//   _____/\\__    ___/"),console.log(" |     ___/  |/     \\|  \\  \\/  /  |       _/|    __)_ \\_____  \\   |    |   "),console.log(" |    |   |  |  Y Y  \\  |>    <   |    |   \\|        \\/        \\  |    |   "),console.log(" |____|   |__|__|_|  /__/__/\\_ \\  |____|_  /_______  /_______  /  |____|   "),console.log("                   \\/         \\/         \\/        \\/        \\/            v"+pe.version),console.log();const Se=s(986);var ye=o()();ye.use(((e,t,s)=>{t.header("Access-Control-Allow-Origin","*"),t.header("Access-Control-Allow-Methods","GET, POST, PUT, DELETE, OPTIONS"),t.header("Access-Control-Allow-Headers","Origin, X-Requested-With, Content-Type, Accept"),s()})),ye.use(Se.json()),ye.use(o().static(t().join(__dirname,"/static"))),ye.use(u),ye.use(F),ye.use(J),ye.use(ee),ye.use(k),ye.use(ce),ye.use(I),ye.use(U),ye.use(ae),ye.use(de),ye.listen(ge,(()=>{console.log(`> API listening to ${ge}....`),console.log("> REST API initialized")}))})()})();