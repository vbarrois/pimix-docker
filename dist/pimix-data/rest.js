!function(e){var t={};function s(n){if(t[n])return t[n].exports;var i=t[n]={i:n,l:!1,exports:{}};return e[n].call(i.exports,i,i.exports,s),i.l=!0,i.exports}s.m=e,s.c=t,s.d=function(e,t,n){s.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},s.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},s.t=function(e,t){if(1&t&&(e=s(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(s.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var i in e)s.d(n,i,function(t){return e[t]}.bind(null,i));return n},s.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return s.d(t,"a",t),t},s.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},s.p="/",s(s.s=41)}([function(e,t,s){"use strict";s.r(t);const n=s(2),i=s(15).production,o={};let r;r=i.use_env_variable?new n(process.env[i.use_env_variable],i):new n(i.database,i.username,i.password,i);const a=s(16);a.keys().map(a).forEach(e=>{const t=e(r,n);o[t.name]=t}),Object.keys(o).forEach(e=>{o[e].associate&&o[e].associate(o)}),o.sequelize=r,o.Sequelize=n,t.default=o},function(e,t){e.exports=require("lodash")},function(e,t){e.exports=require("sequelize")},function(e,t){e.exports=require("express")},,function(e,t){e.exports=require("jimp")},,,,function(e){e.exports=JSON.parse('{"name":"pimix-data","version":"1.0.8","description":"Pimix REST API from data management","main":"index.js","scripts":{"scanner":"nodemon ./dist/scanner.js","data":"nodemon ./dist/rest.js","wifi":"nodemon ./dist/wifi.js","test":"echo \\"Error: no test specified\\" && exit 1","lint":"eslint \\"src/**/*.js\\" --ignore-pattern node_modules/ ","build":"rm -rf dist && webpack","start":"yarn concurrently -k -n \\"data,scanner,wifi\\" -p \\"[{name}]\\" -c \\"yellow,green,blue\\" \\"yarn data\\" \\"yarn scanner\\" \\"yarn wifi\\""},"repository":{"type":"git","url":"git+https://github.com/vbarrois/pimix-data.git"},"author":"Vincent Barrois","license":"ISC","bugs":{"url":"https://github.com/vbarrois/pimix-data/issues"},"homepage":"https://github.com/vbarrois/pimix-data#readme","dependencies":{"@babel/core":"^7.9.6","@babel/preset-env":"^7.9.6","babel-loader":"^8.1.0","bcryptjs":"^2.4.3","bull":"^3.11.0","child_process":"^1.0.2","chokidar":"^3.2.2","colors":"^1.4.0","concurrently":"^5.1.0","copy-webpack-plugin":"^6.1.1","eslint":"^6.6.0","eslint-config-standard":"^14.1.0","eslint-loader":"^4.0.2","eslint-plugin-import":"^2.18.2","eslint-plugin-node":"^10.0.0","eslint-plugin-promise":"^4.2.1","eslint-plugin-standard":"^4.0.1","express":"^4.17.1","getmac":"^5.16.0","jimp":"^0.10.0","moment":"^2.24.0","music-metadata":"^7.4.0","nodemon":"^1.19.4","sequelize":"^5.21.1","socket.io":"^2.3.0","spotify-web-api-node":"^4.0.0","sqlite3":"^4.1.1","webpack":"^4.43.0","webpack-cli":"^3.3.11","webpack-dev-middleware":"^3.7.2","webpack-hot-middleware":"^2.25.0","webpack-node-externals":"^1.7.2"}}')},,function(e,t){e.exports=require("path")},,,,function(e){e.exports=JSON.parse('{"development":{"dialect":"sqlite","seederStorage":"sequelize","storage":"./pimix.sqlite3","logging":false},"production":{"dialect":"sqlite","storage":"/home/pimix.sqlite3","seederStorage":"sequelize","logging":false}}')},function(e,t,s){var n={"./artist.js":17,"./artistgenre.js":18,"./artistrelated.js":19,"./genre.js":20,"./song.js":21,"./songartist.js":22,"./songgenre.js":23,"./songlog.js":24,"./songloguser.js":25,"./user.js":26};function i(e){var t=o(e);return s(t)}function o(e){if(!s.o(n,e)){var t=new Error("Cannot find module '"+e+"'");throw t.code="MODULE_NOT_FOUND",t}return n[e]}i.keys=function(){return Object.keys(n)},i.resolve=o,e.exports=i,i.id=16},function(e,t,s){"use strict";e.exports=(e,t)=>{const s=e.define("Artist",{name:t.STRING,state:t.BOOLEAN,spotifyId:t.STRING,popularity:t.INTEGER,followers:t.INTEGER});return s.associate=function(e){e.Artist.hasMany(e.ArtistRelated,{as:"ArtistRelations",foreignKey:"artist_id"})},s}},function(e,t,s){"use strict";e.exports=(e,t)=>{const s=e.define("ArtistGenre",{artist_id:t.INTEGER,genre_id:t.INTEGER},{indexes:[{unique:!0,fields:["artist_id","genre_id"]}]});return s.associate=function(e){e.Artist.belongsToMany(e.Genre,{as:"Genres",through:{model:s,unique:!1},foreignKey:"artist_id"}),e.Genre.belongsToMany(e.Artist,{as:"Artists",through:{model:s,unique:!1},foreignKey:"genre_id"})},s}},function(e,t,s){"use strict";e.exports=(e,t)=>e.define("ArtistRelated",{artist_id:t.INTEGER,name:t.STRING,spotifyId:t.STRING,followers:t.INTEGER,popularity:t.INTEGER},{freezeTableName:!0})},function(e,t,s){"use strict";e.exports=(e,t)=>e.define("Genre",{name:t.STRING,state:t.BOOLEAN})},function(e,t,s){"use strict";e.exports=(e,t)=>{const s=e.define("Song",{filepath:t.STRING,filename:t.STRING,title:t.STRING,album:t.STRING,year:t.INTEGER,bitrate:t.INTEGER,duration:t.DOUBLE,samplerate:t.INTEGER,size:t.INTEGER,ino:t.INTEGER,birth:t.DATE},{indexes:[{unique:!0,fields:["filepath","filename"]}]});return s.beforeValidate(e=>{e.filepath&&(e.filepath=e.filepath.replace(/\\/g,"/"))}),s.associate=function(e){e.Song.hasMany(e.SongLog,{as:"SongLogs",foreignKey:"songid"})},s}},function(e,t,s){"use strict";e.exports=(e,t)=>{const s=e.define("SongArtist",{song_id:t.INTEGER,artist_id:t.INTEGER},{indexes:[{unique:!0,fields:["song_id","artist_id"]}]});return s.associate=function(e){e.Song.belongsToMany(e.Artist,{as:"Artists",through:{model:s,unique:!1},foreignKey:"song_id"}),e.Artist.belongsToMany(e.Song,{as:"Songs",through:{model:s,unique:!1},foreignKey:"artist_id"})},s}},function(e,t,s){"use strict";e.exports=(e,t)=>{const s=e.define("SongGenre",{song_id:t.INTEGER,genre_id:t.INTEGER},{indexes:[{unique:!0,fields:["song_id","genre_id"]}]});return s.associate=function(e){e.Song.belongsToMany(e.Genre,{as:"Genres",through:{model:s,unique:!1},foreignKey:"song_id"}),e.Genre.belongsToMany(e.Song,{as:"Songs",through:{model:s,unique:!1},foreignKey:"genre_id"})},s}},function(e,t,s){"use strict";e.exports=(e,t)=>{const s=e.define("SongLog",{sessionid:t.STRING(36),songid:t.INTEGER,listenratio:t.FLOAT,origin:t.STRING(10)});return s.associate=function(e){s.belongsTo(e.Song,{foreignKey:"songid"})},s}},function(e,t,s){"use strict";e.exports=(e,t)=>{const s=e.define("SongLogUser",{logid:t.INTEGER,userid:t.INTEGER,vote:t.INTEGER});return s.associate=function(e){s.belongsTo(e.SongLog,{foreignKey:"logid"}),s.belongsTo(e.User,{foreignKey:"userid"})},s}},function(e,t,s){"use strict";var n=s(27);e.exports=(e,t)=>{const s=e.define("User",{login:t.STRING,password:t.STRING,name:t.STRING,rights:t.INTEGER});return s.prototype.validPassword=function(e){return n.compareSync(e,this.password)},s.beforeCreate(e=>(void 0!==e.login&&(e.login=e.login.trim()),void 0!==e.name&&(e.name=e.name.trim()),e)),s.afterValidate(e=>{void 0!==e.password&&(e.password=n.hashSync(e.password,n.genSaltSync(10),null))}),s}},function(e,t){e.exports=require("bcryptjs")},,,,,,,,,function(e,t,s){"use strict";s.r(t),s.d(t,"addSongLog",(function(){return i})),s.d(t,"updateSongLog",(function(){return o})),s.d(t,"addSongUserLog",(function(){return r}));var n=s(0);const i=e=>n.default.SongLog.create(e),o=e=>n.default.SongLog.update({listenratio:e.listenratio},{where:{id:e.id}}),r=e=>n.default.SongLogUser.create(e)},function(e,t){e.exports=require("body-parser")},,,,function(e,t,s){"use strict";s.r(t);var n=s(11),i=s.n(n),o=s(3),r=s.n(o),a=s(0);const d=r.a.Router();d.post("/api/login",(e,t)=>{a.default.User.findOne({where:{login:e.body.login}}).then(s=>s?s.validPassword(e.body.password)?t.status(200).send({connected:!0,user:s}):t.status(200).send({connected:!1,message:"Incorrect password."}):t.status(200).send({connected:!1,message:"Incorrect login."}))}),d.post("/api/pseudo",(e,t)=>{a.default.User.findOrCreate({where:{login:e.body.login},defaults:{login:e.body.login,name:e.body.login,rights:0}}).then(e=>{const s=e[0].dataValues;return s?t.status(200).send({connected:!0,user:s}):t.status(200).send({connected:!1,message:"Incorrect pseudo."})})});var u=d,l=s(2),g=s.n(l);const S=r.a.Router();function c(e){return new Promise((t,s)=>{const n="SELECT S.id AS id, S.filename AS filename FROM Songs S, SongGenres SG, Genres G WHERE SG.song_id = S.id AND SG.genre_id = G.id AND G.state = 1 "+(void 0!==e?"AND S.id <> "+e.id+" ":"")+"ORDER BY RANDOM() LIMIT 0, 1";a.default.sequelize.query(n,{type:g.a.QueryTypes.SELECT}).then(e=>{if(console.log("NEXT (Shuffle but not played yet) : "),console.log(e),e.length>0){return p(e[0].id)}}).then(t).catch(s)})}function p(e){return a.default.Song.findOne({where:{id:e},attributes:["id","filepath","filename","title","album","year","duration"],include:[{model:a.default.Artist,as:"Artists",attributes:["id","name"],required:!1,through:{attributes:[]}},{model:a.default.Genre,as:"Genres",attributes:["id","name"],required:!1,through:{attributes:[]}},{model:a.default.SongLog,as:"SongLogs",attributes:["listenratio"]}]})}S.post("/api/genius/next",(e,t)=>{var s;t.header("Content-Type","application/json; charset=utf-8"),e.body.shuffle?c(e.body.current).then(e=>t.status(200).send({origin:"shuffle",song:e})).catch(e=>(console.log("There was an error querying genius next",JSON.stringify(e)),t.status(500).send(e))):(s=e.body.current,new Promise((e,t)=>{const n="SELECT S.id AS id, S.filename AS filename, count() AS played, "+(void 0!==s?"ABS(S.year-"+s.year+") AS yeardelta, ":"")+"(AVG(SL.listenratio)*2-.4)*(1-1.0/(count(SL.listenratio)+2)) AS avgduration FROM Songs S,SongLogs SL, SongGenres SG, Genres G WHERE S.id = SL.songid AND SG.song_id = S.id AND SG.genre_id = G.id AND G.state = 1 "+(void 0!==s?"AND S.id <> "+s.id+" ":"")+'AND S.id NOT IN (SELECT SGLG.songid from SongLogs SGLG where datetime(SGLG.createdAt) >= datetime("now", "-2 Hour")) GROUP BY S.id ORDER BY avgduration DESC, '+(void 0!==s?"yeardelta ASC, ":"")+"S.id DESC LIMIT 0, 1";a.default.sequelize.query(n,{type:g.a.QueryTypes.SELECT}).then(e=>(console.log("NEXT (Genius) : "),console.log(e),e.length>0?p(e[0].id):c())).then(e).catch(t)})).then(e=>t.status(200).send({origin:"genius",song:e})).catch(e=>(console.log("There was an error querying genius next",JSON.stringify(e)),t.status(500).send(e)))});var f=S,_=s(1),A=s.n(_);const y=s(36),E=r.a.Router();E.post("/api/log/songplayed",(e,t)=>{t.header("Content-Type","application/json; charset=utf-8");const s=e.body.item,n=e.body.sessionid,i=e.body.item.origin;null!==s&&null!==s.song&&y.addSongLog({sessionid:n,songid:s.song.id,origin:i}).then(e=>{const t=e.dataValues,n=[];return A.a.forEach(s.votes,e=>{const s={logid:t.id,userid:e.userid,vote:e.points};n.push(y.addSongUserLog(s))}),new Promise((e,s)=>{Promise.all(n).then(e(t)).catch(s)})}).then(e=>t.status(200).send(e)).catch(e=>(console.log("Cannot create song logs",JSON.stringify(e)),t.status(500).send(e)))}),E.post("/api/log/songcomplete",(e,t)=>{t.header("Content-Type","application/json; charset=utf-8");const s=e.body.id,n=e.body.listenratio;y.updateSongLog({id:s,listenratio:n}).then(()=>t.status(200).end()).catch(e=>(console.log("Cannot update song logs",JSON.stringify(e)),t.status(500).send(e)))});var h=E;const m=r.a.Router(),G=g.a.Op,T={attributes:["id","filepath","filename","title","album","year","duration","birth"],include:[{model:a.default.Artist,as:"Artists",attributes:["id","name"],required:!1,through:{attributes:[]}},{model:a.default.Genre,as:"Genres",attributes:["id","name"],required:!1,through:{attributes:[]}},{model:a.default.SongLog,as:"SongLogs",attributes:["listenratio"]}]};m.post("/api/search/library",(e,t)=>{var s=e.body.keywords;t.header("Content-Type","application/json; charset=utf-8"),a.default.Song.findAll({attributes:["id","filepath","filename","title","album","year","duration"],where:{[G.or]:[{title:{[G.like]:"%"+s+"%"}},{filename:{[G.like]:"%"+s+"%"}},{year:s},{"$Genres.name$":{[G.like]:"%"+s+"%"}},{"$Artists.name$":{[G.like]:"%"+s+"%"}}]},include:[{model:a.default.Artist,as:"Artists",attributes:["id","name"],required:!1,through:{attributes:[]}},{model:a.default.Genre,as:"Genres",attributes:["id","name"],required:!1,through:{attributes:[]}},{model:a.default.SongLog,as:"SongLogs",attributes:["listenratio"]}]}).then(e=>t.send(e)).catch(e=>(console.log("There was an error querying songs",JSON.stringify(e)),t.status(500).send(e)))}),m.post("/api/search/:mode",(e,t)=>{const s=e.body.current,n=void 0!==s?s.year:0,i=void 0!==s?s.id:0,o=e.body.sessionid;var r;switch(e.params.mode){case"listenratio":r="SELECT SL.songid AS id, AVG(SL.listenratio) AS listenratio, COUNT(SL.songid) AS played FROM SongLogs SL GROUP BY SL.songid ORDER BY listenratio desc, played DESC";break;case"mostplayed":r="SELECT SL.songid AS id, COUNT(SL.songid) AS played FROM SongLogs SL GROUP BY SL.songid ORDER BY played DESC, SL.createdAt DESC";break;case"mostvoted":r="SELECT SL.songid AS id, SUM(SLU.vote) AS vote FROM SongLogUsers SLU, SongLogs SL WHERE SLU.logid = SL.id GROUP BY SL.songid ORDER BY vote DESC, SL.createdAt DESC";break;case"lastadded":r="SELECT S.id AS id, S.birth AS birth FROM Songs S ORDER BY birth DESC, S.id DESC";break;case"sameartist":r="SELECT SA.song_id AS id, SA.artist_id AS artistid, ABS(S.year-"+n+") AS decay FROM SongArtists SA, Songs S WHERE S.id = SA.song_id AND S.id <> "+i+" AND SA.artist_id in ("+A.a.map(s.Artists,e=>e.id).toString()+") ORDER BY decay ASC, artistid ASC, SA.song_id DESC";break;case"samegenre":r="SELECT SG.song_id AS id, SG.genre_id AS genreid, ABS(S.year-"+n+") AS decay FROM SongGenres SG, Songs S WHERE S.id = SG.song_id AND S.id <> "+i+" AND SG.genre_id in ("+A.a.map(s.Genres,e=>e.id).toString()+") ORDER BY decay ASC, genreid ASC, SG.song_id DESC";break;case"sameyear":r="SELECT S.id AS id FROM Songs S WHERE S.year = "+n+" AND S.id <> "+i+" ORDER BY S.id DESC";break;case"never":r="SELECT S.id AS id, ABS(S.year-"+n+") AS yeardelta FROM Songs S WHERE S.id NOT IN ( SELECT songid FROM SongLogs) ORDER BY yeardelta ASC, S.id DESC";break;case"genius":r="SELECT S.id AS id, count() AS played, ABS(S.year-"+n+") AS yeardelta, (AVG(SL.listenratio)*2-.4)*(1-1.0/(count(SL.listenratio)+2)) AS avgduration FROM Songs S, SongLogs SL WHERE S.id = SL.songid AND S.id <> "+i+" AND S.id NOT IN ( SELECT songid FROM SongLogs WHERE sessionid = '"+o+"') GROUP BY S.id ORDER BY avgduration DESC, yeardelta ASC, S.id DESC";break;case"artistrelated":r="SELECT S.id AS id FROM SongArtists SA, ArtistRelated AR, Artists A, Songs S, SongArtists SA2, SongGenres SG, Genres G WHERE SA.artist_id = AR.artist_id AND A.spotifyId = AR.spotifyId AND A.id = SA2.artist_id AND SA2.song_id = S.id AND SG.song_id = S.id AND SG.genre_id = G.id AND G.state = 1 AND S.id not in (SELECT songid from SongLogs WHERE sessionid = '"+o+"') AND SA.song_id = "+i;break;case"commongenres":r="SELECT S.id as id, COUNT(G.id) as CommonGenre FROM SongArtists SA, ArtistGenres AG, Genres G, ArtistGenres AG2, SongArtists SA2, Songs S WHERE AG.artist_id = SA.artist_id AND AG2.genre_id = G.id AND AG2.genre_id = AG.genre_id AND AG2.artist_id = SA2.artist_id AND S.id = SA2.song_id AND S.id NOT IN (SELECT songid from SongLogs WHERE sessionid = '"+o+"') AND SA.song_id = "+i+" GROUP BY S.id ORDER BY CommonGenre DESC, S.id DESC"}(function(e,t){return new Promise((e,s)=>{const n=t+" LIMIT 0, 100";a.default.sequelize.query(n,{type:g.a.QueryTypes.SELECT}).then(e=>function(e){return new Promise((t,s)=>{const n=A.a.map(e,e=>e.id);var i=T;i.where={id:{[G.in]:n}},a.default.Song.findAll(i).then(s=>{const n=A.a.map(e,e=>A.a.merge(e,A.a.find(A.a.map(s,e=>e.get({plain:!0})),t=>t.id===e.id)));t(n)}).catch(s)})}(e)).then(t=>{e(t)}).catch(s)})})(0,r).then(e=>{t.send(e)}).catch(s=>(console.log("There was an error querying "+e.params.mode,JSON.stringify(s)),t.status(500).send(s)))});var b=m,R=s(5),N=s.n(R);const L=r.a.Router(),O=process.env.COVER_FOLDER||"/home/covers";function C(e,t){return new Promise((s,n)=>{a.default.Song.findOne({where:{id:e}}).then(e=>{const o=O+(t?"/thumbs/":"/")+i.a.parse(e.filename).name+".jpg";N.a.read(o).then(e=>{e.getBuffer(N.a.MIME_JPEG,(e,t)=>{e?n(e):s(t)})}).catch(e=>{n(e)})}).catch(e=>{n(e)})})}L.get("/api/songs",(e,t)=>{t.header("Content-Type","application/json; charset=utf-8"),a.default.Song.findAll({include:[{model:a.default.Genre,as:"Genres"},{model:a.default.Artist,as:"Artists"}]}).then(e=>t.send(e)).catch(e=>(console.log("There was an error querying songs",JSON.stringify(e)),t.status(500).send(e)))}),L.get("/api/songs/genre/:genre",(e,t)=>{t.header("Content-Type","application/json; charset=utf-8"),a.default.Song.findAll({where:{"$Genres.id$":e.params.genre.split(",")},include:[{model:a.default.Genre,as:"Genres",required:!1},{model:a.default.Artist,as:"Artists",required:!1}]}).then(e=>t.send(e)).catch(e=>(console.log("There was an error querying songs",JSON.stringify(e)),t.status(500).send(e)))}),L.get("/api/songs/artist/:artist",(e,t)=>{t.header("Content-Type","application/json; charset=utf-8"),a.default.Song.findAll({where:{"$Artists.id$":e.params.artist.split(",")},include:[{model:a.default.Genre,as:"Genres",required:!1},{model:a.default.Artist,as:"Artists",required:!1}]}).then(e=>t.send(e)).catch(e=>(console.log("There was an error querying songs",JSON.stringify(e)),t.status(500).send(e)))}),L.get("/api/song/thumb/:id",(e,t)=>{C(e.params.id,!0).then(e=>{t.set("Content-Type",N.a.MIME_JPEG),t.status(200).send(e)}).catch(e=>{console.log(e),t.status(404).end()})}),L.get("/api/song/cover/:id",(e,t)=>{C(e.params.id,!1).then(e=>{t.set("Content-Type",N.a.MIME_JPEG),t.status(200).send(e)}).catch(()=>{t.status(404).end()})});var D=L;const v=r.a.Router();v.get("/api/genres",(e,t)=>{t.header("Content-Type","application/json; charset=utf-8");a.default.sequelize.query("SELECT G.id, G.name, G.state, COUNT(SG.song_id) AS songs, MIN(S.year) AS yearfrom, MAX(S.year) AS yearto FROM SongGenres SG, Genres G, Songs S WHERE SG.genre_id = G.id AND SG.song_id = S.id GROUP BY G.id",{type:g.a.QueryTypes.SELECT}).then(e=>{t.status(200).json(e)}).catch(e=>{t.status(500).send(e)})}),v.post("/api/genres/state",(e,t)=>{t.header("Content-Type","application/json; charset=utf-8");const s=e.body.genreid,n="UPDATE Genres SET state = "+e.body.state+" WHERE id = "+s;a.default.sequelize.query(n,{type:g.a.QueryTypes.UPDATE}).then(()=>{t.status(200).end()}).catch(e=>{t.status(500).send(e)})});var q=v;const w=r.a.Router();w.get("/api/artists",(e,t)=>{t.header("Content-Type","application/json; charset=utf-8");a.default.sequelize.query("SELECT A.id, A.name, A.spotifyId, A.followers, A.popularity, A.state, COUNT(SA.song_id) AS songs, MIN(S.year) AS yearfrom, MAX(S.year) AS yearto FROM SongArtists SA, Artists A, Songs S WHERE SA.artist_id = A.id AND SA.song_id = S.id GROUP BY A.id",{type:g.a.QueryTypes.SELECT}).then(e=>{t.status(200).json(e)}).catch(e=>{t.status(500).send(e)})}),w.post("/api/artists/state",(e,t)=>{t.header("Content-Type","application/json; charset=utf-8");const s=e.body.artistid,n="UPDATE Artists SET state = "+e.body.state+" WHERE id = "+s;a.default.sequelize.query(n,{type:g.a.QueryTypes.UPDATE}).then(()=>{t.status(200).end()}).catch(e=>{t.status(500).send(e)})});var I=w;const j=r.a.Router();j.post("/api/year",(e,t)=>{var s=e.body.song.year;t.header("Content-Type","application/json; charset=utf-8"),a.default.Song.findAll({attributes:["id","filepath","filename","title","album","year","duration"],where:{year:s},include:[{model:a.default.Artist,as:"Artists",attributes:["id","name"],required:!1,through:{attributes:[]}},{model:a.default.Genre,as:"Genres",attributes:["id","name"],required:!1,through:{attributes:[]}}]}).then(e=>t.send(e)).catch(e=>(console.log("There was an error querying songs",JSON.stringify(e)),t.status(500).send(e)))});var M=j;const x=s(9);console.clear(),console.log("__________.__        .__         _____________________ ____________________"),console.log("\\______   \\__| _____ |__|__  ___ \\______   \\_   _____//   _____/\\__    ___/"),console.log(" |     ___/  |/     \\|  \\  \\/  /  |       _/|    __)_ \\_____  \\   |    |   "),console.log(" |    |   |  |  Y Y  \\  |>    <   |    |   \\|        \\/        \\  |    |   "),console.log(" |____|   |__|__|_|  /__/__/\\_ \\  |____|_  /_______  /_______  /  |____|   "),console.log("                   \\/         \\/         \\/        \\/        \\/            v"+x.version),console.log();const U=s(37);var P=r()();P.use((e,t,s)=>{t.header("Access-Control-Allow-Origin","*"),t.header("Access-Control-Allow-Headers","Origin, X-Requested-With, Content-Type, Accept"),s()}),P.use(U.json()),P.use(r.a.static(i.a.join(__dirname,"/static"))),P.use(u),P.use(f),P.use(h),P.use(b),P.use(D),P.use(M),P.use(q),P.use(I),P.listen(81,()=>{console.log("> REST API initialized")})}]);