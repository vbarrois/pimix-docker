!function(e){var t={};function n(i){if(t[i])return t[i].exports;var o=t[i]={i:i,l:!1,exports:{}};return e[i].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=e,n.c=t,n.d=function(e,t,i){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:i})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var i=Object.create(null);if(n.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(i,o,function(t){return e[t]}.bind(null,o));return i},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="/",n(n.s=4)}([function(e,t,n){"use strict";n.r(t);const i=n(2),o=n(12).production,s={};let r;r=o.use_env_variable?new i(process.env[o.use_env_variable],o):new i(o.database,o.username,o.password,o);const a=n(13);a.keys().map(a).forEach(e=>{const t=e(r,i);s[t.name]=t}),Object.keys(s).forEach(e=>{s[e].associate&&s[e].associate(s)}),s.sequelize=r,s.Sequelize=i,t.default=s},function(e,t){e.exports=require("lodash")},function(e,t){e.exports=require("sequelize")},,function(e,t,n){"use strict";n.r(t),n.d(t,"scanner",(function(){return R})),n.d(t,"cleanOrphan",(function(){return x})),n.d(t,"fileOnDisk",(function(){return G})),n.d(t,"purgeUnreferencedSongs",(function(){return N})),n.d(t,"sendScan",(function(){return q}));var i=n(27),o=n.n(i),s=n(9),r=n.n(s),a=n(5),c=n(32),l=n.n(c),d=n(26);const u=e=>{const t=e.replace(/\\/g,"/"),n=t.lastIndexOf("/"),i=t.lastIndexOf(".");return{filepath:t.substring(0,n),filename:t.substring(n+1,n.length),fileext:t.substring(i+1,i.length)}},f=e=>"mp3"===e.fileext;var g=n(2),p=n.n(g),m=n(7),_=n.n(m),h=n(1),b=n.n(h),y=n(0);const S=process.env.COVER_FOLDER||"/home/music/cover";_.a.existsSync(S)||_.a.mkdirSync(S),_.a.existsSync(S+"/thumbs/")||_.a.mkdirSync(S+"/thumbs/");const E=process.env.MUSIC_FOLDER||"/home/music/wbom";_.a.existsSync(E)||_.a.mkdirSync(E);const w=n(25);console.clear(),console.log("__________.__   _____  .__           _________                                         "),console.log("\\______   \\__| /     \\ |__|__  ___  /   _____/ ____ _____    ____   ____   ___________ "),console.log(" |     ___/  |/  \\ /  \\|  \\  \\/  /  \\_____  \\_/ ___\\\\__  \\  /    \\ /    \\_/ __ \\_  __ \\"),console.log(" |    |   |  /    Y    \\  |>    <   /        \\  \\___ / __ \\|   |  \\   |  \\  ___/|  | \\/"),console.log(" |____|   |__\\____|__  /__/__/\\_ \\ /_______  /\\___  >____  /___|  /___|  /\\___  >__|   "),console.log("                     \\/         \\/         \\/     \\/     \\/     \\/     \\/     \\/       "+w.version),console.log(),console.log("> Music folder: "+E),console.log("> Cover folder: "+S);const v=process.env.PIMIX_ROUTER||"127.0.0.1:82",T="http://"+v,O=o.a.connect(T,{query:'binding={ "component": "scanner" }'}),R={nbsongs:0,since:null,queue:0,completed:0,failed:0};var I=[];y.default.sequelize.query("SELECT filepath, filename FROM Songs",{type:p.a.QueryTypes.SELECT}).then(e=>{var t;console.log("> Database scanned"),I=e,t=E,l.a.watch(t,{ignored:/(^|[/\\])\../,persistent:!0,awaitWriteFinish:{stabilityThreshold:2e3,pollInterval:100}}).on("add",(e,t)=>{const n=u(e);G(n),f(n)&&Object(d.isRegistered)(n,e=>{t.ino===e.ino&&t.size===e.size||Object(a.a)({action:"update",file:n,stats:t})},()=>{Object(a.a)({action:"add",file:n,stats:t})},e=>{console.log("watcher add error: "+e.toString())})}).on("unlink",e=>{const t=u(e);f(t)&&Object(a.a)({action:"remove",file:t})}).on("change",(e,t)=>{const n=u(e);f(n)&&Object(a.a)({action:"update",file:n,stats:t})}).on("ready",()=>{console.log("> Initial folder scan complete. Ready for changes"),N(),q()})}),O.on("connect",()=>{console.log("> Router connected: "+v),y.default.sequelize.query("SELECT COUNT(*) AS nbsongs, MAX(createdAt) AS since FROM Songs",{type:p.a.QueryTypes.SELECT}).then(e=>{const t=e[0];R.nbsongs=t.nbsongs,R.since=r()(t.since,"YYYY-MM-DD"),q()}).catch(e=>{console.log("There was an error querying scanner stats",e.toString())})});const x=()=>new Promise((e,t)=>{console.log("> Clean database orphans"),y.default.sequelize.query("DELETE FROM Artists WHERE id NOT IN ( SELECT artist_id FROM SongArtists )",{type:p.a.QueryTypes.DELETE}).then(()=>y.default.sequelize.query("DELETE FROM Genres WHERE id NOT IN ( SELECT genre_id FROM SongGenres UNION SELECT genre_id FROM ArtistGenres )",{type:p.a.QueryTypes.DELETE})).then(e).catch(t)}),G=e=>{b.a.remove(I,t=>t.filepath===e.filepath&&t.filename===e.filename)},N=()=>{if(I.length>0){const e=[];y.default.sequelize.transaction(t=>(b.a.forEach(I,n=>{e.push(y.default.Song.destroy({where:{filepath:n.filepath,filename:n.filename},transaction:t}))}),Promise.all(e))).then(()=>{console.log("> "+I.length+" database entries without file removed"),console.log("> Database is up-to-date")}).catch(e=>{console.log("! Cannot clean entries without file "+e.toString())})}else console.log("> Database is up-to-date")},q=()=>{const e=JSON.stringify(R);O.emit("update",e)}},function(e,t,n){"use strict";n.d(t,"a",(function(){return u}));var i=n(28),o=n.n(i),s=n(4),r=n(9),a=n.n(r);const c=process.env.PIMIX_REDIS||"127.0.0.1:6379",l=n(35),d=o()("Register Song","redis://"+c);d.empty().then(()=>{console.log("> Queue cleaned"),d.process(l)}).catch(e=>{console.log("! Queue error "+e.toString())}),d.on("error",e=>{console.log("Job execution error: "+e)}).on("completed",(e,t)=>{s.scanner.queue--,s.scanner.completed++,"add"===e.data.action?(s.scanner.nbsongs++,s.scanner.since=a()()):"remove"===e.data.action&&s.scanner.nbsongs--,console.log("Job completed ["+t.info+"] "+t.time+"ms"),e.remove()}).on("failed",(e,t)=>{s.scanner.queue--,s.scanner.failed++,console.log("Job failed ["+t.info+"] "+t.time+"ms"),e.remove()}).on("active",(e,t)=>{Object(s.sendScan)()}).on("drained",()=>{Object(s.cleanOrphan)(),console.log("> Queue idle"),Object(s.sendScan)()});const u=e=>{s.scanner.queue++,d.add(e)}},function(e,t){e.exports=require("jimp")},function(e,t){e.exports=require("fs")},,function(e,t){e.exports=require("moment")},function(e,t,n){"use strict";n.d(t,"a",(function(){return r})),n.d(t,"b",(function(){return a}));var i=n(0),o=n(1),s=n.n(o);const r=(e,t,n)=>new Promise((o,s)=>{const r=e.trim();var a=!1;i.default.Artist.findOne({where:{name:r}}).then(e=>null!==e?e:(a=!0,i.default.Artist.create({name:r},{transaction:n}))).then(e=>{o({artist_id:e.id,song_id:t,name:r,isNewRecord:a})}).catch(s)}),a=(e,t)=>new Promise((n,i)=>{const o={main:{artist:{name:t},genres:[]},related:[]};void 0!==e?e.searchArtists(t).then(n=>{const r=t.toUpperCase().trim(),a=n.body.artists.items,c=s.a.find(a,e=>void 0!==e.name&&e.name.toUpperCase().trim()===r);if(void 0!==c)return o.main.artist.spotifyId=c.id,o.main.artist.popularity=c.popularity,o.main.artist.followers=c.followers.total,o.main.genres=s.a.map(c.genres,e=>({name:e})),e.getArtistRelatedArtists(c.id);i(new Error("Unable to find artist with same name"))}).then(e=>{const t=e.body.artists;s.a.forEach(t,e=>{o.related.push({artist:{name:e.name,spotifyId:e.id,popularity:e.popularity,followers:e.followers.total},genres:s.a.map(e.genres,e=>({name:e}))})}),n(o)}).catch(i):i(new Error("Spotify API unavailable"))})},function(e,t,n){"use strict";n.d(t,"b",(function(){return o})),n.d(t,"a",(function(){return s}));var i=n(0);const o=(e,t,n)=>new Promise((i,o)=>{r(e,n).then(e=>{i({genre_id:e.id,song_id:t})}).catch(o)}),s=(e,t,n)=>new Promise((i,o)=>{r(e,n).then(e=>{i({genre_id:e.id,artist_id:t})}).catch(o)}),r=(e,t)=>new Promise((n,o)=>{const s=e.trim().toUpperCase();i.default.Genre.findOne({where:{name:s}}).then(e=>{if(null===e)return i.default.Genre.create({name:s},{transaction:t});n(e)}).then(n).catch(o)})},function(e){e.exports=JSON.parse('{"development":{"dialect":"sqlite","seederStorage":"sequelize","storage":"./pimix.sqlite3","logging":false},"production":{"dialect":"sqlite","storage":"/home/pimix.sqlite3","seederStorage":"sequelize","logging":false}}')},function(e,t,n){var i={"./artist.js":14,"./artistgenre.js":15,"./artistrelated.js":16,"./genre.js":17,"./song.js":18,"./songartist.js":19,"./songgenre.js":20,"./songlog.js":21,"./songloguser.js":22,"./user.js":23};function o(e){var t=s(e);return n(t)}function s(e){if(!n.o(i,e)){var t=new Error("Cannot find module '"+e+"'");throw t.code="MODULE_NOT_FOUND",t}return i[e]}o.keys=function(){return Object.keys(i)},o.resolve=s,e.exports=o,o.id=13},function(e,t,n){"use strict";e.exports=(e,t)=>{const n=e.define("Artist",{name:t.STRING,state:t.BOOLEAN,spotifyId:t.STRING,popularity:t.INTEGER,followers:t.INTEGER});return n.associate=function(e){e.Artist.hasMany(e.ArtistRelated,{as:"ArtistRelations",foreignKey:"artist_id"})},n}},function(e,t,n){"use strict";e.exports=(e,t)=>{const n=e.define("ArtistGenre",{artist_id:t.INTEGER,genre_id:t.INTEGER},{indexes:[{unique:!0,fields:["artist_id","genre_id"]}]});return n.associate=function(e){e.Artist.belongsToMany(e.Genre,{as:"Genres",through:{model:n,unique:!1},foreignKey:"artist_id"}),e.Genre.belongsToMany(e.Artist,{as:"Artists",through:{model:n,unique:!1},foreignKey:"genre_id"})},n}},function(e,t,n){"use strict";e.exports=(e,t)=>e.define("ArtistRelated",{artist_id:t.INTEGER,name:t.STRING,spotifyId:t.STRING,followers:t.INTEGER,popularity:t.INTEGER},{freezeTableName:!0})},function(e,t,n){"use strict";e.exports=(e,t)=>e.define("Genre",{name:t.STRING,state:t.BOOLEAN})},function(e,t,n){"use strict";e.exports=(e,t)=>{const n=e.define("Song",{filepath:t.STRING,filename:t.STRING,title:t.STRING,album:t.STRING,year:t.INTEGER,bitrate:t.INTEGER,duration:t.DOUBLE,samplerate:t.INTEGER,size:t.INTEGER,ino:t.INTEGER,birth:t.DATE},{indexes:[{unique:!0,fields:["filepath","filename"]}]});return n.beforeValidate(e=>{e.filepath&&(e.filepath=e.filepath.replace(/\\/g,"/"))}),n.associate=function(e){e.Song.hasMany(e.SongLog,{as:"SongLogs",foreignKey:"songid"})},n}},function(e,t,n){"use strict";e.exports=(e,t)=>{const n=e.define("SongArtist",{song_id:t.INTEGER,artist_id:t.INTEGER},{indexes:[{unique:!0,fields:["song_id","artist_id"]}]});return n.associate=function(e){e.Song.belongsToMany(e.Artist,{as:"Artists",through:{model:n,unique:!1},foreignKey:"song_id"}),e.Artist.belongsToMany(e.Song,{as:"Songs",through:{model:n,unique:!1},foreignKey:"artist_id"})},n}},function(e,t,n){"use strict";e.exports=(e,t)=>{const n=e.define("SongGenre",{song_id:t.INTEGER,genre_id:t.INTEGER},{indexes:[{unique:!0,fields:["song_id","genre_id"]}]});return n.associate=function(e){e.Song.belongsToMany(e.Genre,{as:"Genres",through:{model:n,unique:!1},foreignKey:"song_id"}),e.Genre.belongsToMany(e.Song,{as:"Songs",through:{model:n,unique:!1},foreignKey:"genre_id"})},n}},function(e,t,n){"use strict";e.exports=(e,t)=>{const n=e.define("SongLog",{sessionid:t.STRING(36),songid:t.INTEGER,listenratio:t.FLOAT,origin:t.STRING(10)});return n.associate=function(e){n.belongsTo(e.Song,{foreignKey:"songid"})},n}},function(e,t,n){"use strict";e.exports=(e,t)=>{const n=e.define("SongLogUser",{logid:t.INTEGER,userid:t.INTEGER,vote:t.INTEGER});return n.associate=function(e){n.belongsTo(e.SongLog,{foreignKey:"logid"}),n.belongsTo(e.User,{foreignKey:"userid"})},n}},function(e,t,n){"use strict";var i=n(24);e.exports=(e,t)=>{const n=e.define("User",{login:t.STRING,password:t.STRING,name:t.STRING,rights:t.INTEGER});return n.prototype.validPassword=function(e){return i.compareSync(e,this.password)},n.beforeCreate(e=>(void 0!==e.login&&(e.login=e.login.trim()),void 0!==e.name&&(e.name=e.name.trim()),e)),n.afterValidate(e=>{void 0!==e.password&&(e.password=i.hashSync(e.password,i.genSaltSync(10),null))}),n}},function(e,t){e.exports=require("bcryptjs")},function(e){e.exports=JSON.parse('{"name":"pimix-data","version":"1.0.8","description":"Pimix REST API from data management","main":"index.js","scripts":{"scanner":"nodemon ./dist/scanner.js","data":"nodemon ./dist/data.js","test":"echo \\"Error: no test specified\\" && exit 1","lint":"eslint \\"src/**/*.js\\" --ignore-pattern node_modules/ ","build":"rm -rf dist && webpack","start":"npx concurrently -k -n \\"data,scanner\\" -p \\"[{name}]\\" -c \\"yellow,green\\" \\"npm run data\\" \\"npm run scanner\\""},"repository":{"type":"git","url":"git+https://github.com/vbarrois/pimix-data.git"},"author":"Vincent Barrois","license":"ISC","bugs":{"url":"https://github.com/vbarrois/pimix-data/issues"},"homepage":"https://github.com/vbarrois/pimix-data#readme","dependencies":{"@babel/core":"^7.9.6","@babel/preset-env":"^7.9.6","babel-loader":"^8.1.0","bcryptjs":"^2.4.3","bull":"^3.11.0","child_process":"^1.0.2","chokidar":"^3.2.2","colors":"^1.4.0","concurrently":"^5.1.0","copy-webpack-plugin":"^5.1.1","eslint":"^6.6.0","eslint-config-standard":"^14.1.0","eslint-loader":"^4.0.2","eslint-plugin-import":"^2.18.2","eslint-plugin-node":"^10.0.0","eslint-plugin-promise":"^4.2.1","eslint-plugin-standard":"^4.0.1","express":"^4.17.1","jimp":"^0.10.0","moment":"^2.24.0","music-metadata":"^4.8.2","nodemon":"^1.19.4","sequelize":"^5.21.1","socket.io":"^2.3.0","spotify-web-api-node":"^4.0.0","sqlite3":"^4.1.1","webpack":"^4.43.0","webpack-cli":"^3.3.11","webpack-dev-middleware":"^3.7.2","webpack-hot-middleware":"^2.25.0","webpack-node-externals":"^1.7.2"}}')},function(e,t,n){"use strict";n.r(t),n.d(t,"isRegistered",(function(){return o})),n.d(t,"create",(function(){return s})),n.d(t,"update",(function(){return r})),n.d(t,"destroy",(function(){return a}));var i=n(0);const o=(e,t,n,o)=>{i.default.Song.findOne({where:{filename:e.filename,filepath:e.filepath}}).then(e=>{null===e?n():t(e)}).catch(o)},s=e=>i.default.Song.create(e),r=(e,t)=>new Promise((n,o)=>{i.default.Song.update(t,{where:e}).then(()=>i.default.Song.findOne({where:e})).then(n).catch(o)}),a=(e,t)=>i.default.Song.destroy({where:e,transaction:t})},function(e,t){e.exports=require("socket.io-client")},function(e,t){e.exports=require("bull")},function(e,t){e.exports=require("music-metadata")},function(e,t){e.exports=require("spotify-web-api-node")},function(e,t){e.exports=require("child_process")},function(e,t){e.exports=require("chokidar")},,,function(e,t,n){const{deleteSong:i,createSong:o,updateSong:s}=n(39),{spotifyArtist:r}=n(36),{mp3gain:a}=n(37),c=n(0);e.exports=function(e){return new Promise((t,n)=>{const l=process.hrtime(),d={success:!1,action:e.data.action,info:"",time:0,messages:[]};c.default.sequelize.transaction(t=>{switch(e.data.action){case"remove":return d.info="remove "+e.data.file.filename,i(e,t);case"add":return d.info="add "+e.data.file.filename,o(e,t);case"update":return d.info="update "+e.data.file.filename,s(e,t);case"artist-spotify":return d.info="spotify "+e.data.artist.name,r(e,t);case"mp3-gain":return d.info="gain "+e.data.file.filename,a(e);default:n(d)}}).then(()=>{d.success=!0,d.time=process.hrtime(l)[1]/1e6,t(d)}).catch(e=>{d.time=process.hrtime(l)[1]/1e6,void 0!==e&&(d.messages=[e.toString()]),n(d)})})}},function(e,t,n){"use strict";n.r(t),n.d(t,"spotifyArtist",(function(){return l}));var i=n(30),o=n.n(i),s=n(0),r=n(10),a=n(11),c=new o.a({clientId:"b5bddd99c0e5478882a08dd12b3f8198",clientSecret:"98f938ee4c0a4bbfb6c91d164d5922a8",redirectUri:"http://localhost/spotify"});const l=(e,t)=>new Promise((n,i)=>{let o;const a=e.data.artist;let l,f=[];c.clientCredentialsGrant().then(e=>(o=e.body.access_token,c.setAccessToken(o),Object(r.b)(c,a.name))).then(e=>{l=e.main,f=e.related;const n={spotifyId:l.artist.spotifyId,popularity:l.artist.popularity,followers:l.artist.followers},i={id:a.artist_id};return s.default.Artist.update(n,{where:i,transaction:t})}).then(()=>l.genres.reduce((e,n)=>e.then(e=>d(n.name,a.artist_id,t)),Promise.resolve())).then(()=>f.reduce((e,n)=>e.then(e=>u(n,a.artist_id,t)),Promise.resolve())).then(n).catch(i)}),d=(e,t,n)=>new Promise((i,o)=>{Object(a.a)(e,t,n).then(e=>s.default.ArtistGenre.create(e,{transaction:n})).then(i).catch(o)}),u=(e,t,n)=>{const i={artist_id:t,name:e.artist.name,spotifyId:e.artist.spotifyId,followers:e.artist.followers,popularity:e.artist.popularity};return s.default.ArtistRelated.create(i,{transaction:n})}},function(e,t,n){"use strict";n.r(t),n.d(t,"mp3gain",(function(){return o}));var i=n(31);const o=e=>new Promise((t,n)=>{const o="mp3gain -r -p -c '"+(e.data.file.filepath+"/"+e.data.file.filename)+"'";Object(i.exec)(o,(e,i)=>{null!==e?n(e):t(i)})})},,function(e,t,n){"use strict";n.r(t),n.d(t,"deleteSong",(function(){return m})),n.d(t,"createSong",(function(){return _})),n.d(t,"updateSong",(function(){return h})),n.d(t,"saveArtistsAndGenres",(function(){return b}));var i=n(0),o=n(1),s=n.n(o),r=n(29),a=n(6),c=n.n(a),l=n(10),d=n(11);var u=n(5);const f=n(7),g=n(26),p=process.env.COVER_FOLDER||"/home/music/cover",m=(e,t)=>new Promise((n,i)=>{g.destroy({filepath:e.data.file.filepath,filename:e.data.file.filename},t).then(()=>{const t=[],i=e.data.file.filename.lastIndexOf("."),o=e.data.file.filename.substring(0,i),s=p+"/"+o+".jpg";f.unlink(s,e=>{null!==e&&t.push("Unable to delete cover "+s+": "+e)});const r=p+"/thumbs/"+o+".jpg";f.unlink(r,e=>{null!==e&&t.push("Unable to delete cover thumbnail"+r+": "+e)}),n()}).catch(i)}),_=(e,t)=>new Promise((n,o)=>{let s;y(e).then(e=>(s=e,i.default.Song.create(s.song,{transaction:t}))).then(e=>(s.song.id=e.id,b(s,t))).then(()=>{Object(u.a)({action:"mp3-gain",file:e.data.file})}).then(n).catch(o)}),h=(e,t)=>new Promise((n,o)=>{let s;y(e).then(e=>(s=e,i.default.Song.findOne({where:{filepath:s.song.filepath,filename:s.song.filename}}))).then(e=>(s.song.id=e.id,i.default.Song.update(s.song,{where:{id:s.song.id},transaction:t}))).then(()=>((e,t)=>i.default.SongArtist.destroy({where:{song_id:e.id},transaction:t}))(s.song,t)).then(()=>((e,t)=>i.default.SongGenre.destroy({where:{song_id:e.id},transaction:t}))(s.song,t)).then(()=>b(s,t)).then(n).catch(o)}),b=(e,t)=>new Promise((n,o)=>{const r=e.artist.split(";"),a=[];s.a.forEach(r,n=>{a.push(Object(l.a)(n,e.song.id,t))});const c=e.genre,f=[];s.a.forEach(c,n=>{f.push(Object(d.b)(n,e.song.id,t))}),Promise.all(a).then(e=>{const n=s.a.filter(e,e=>e.isNewRecord);s.a.forEach(n,e=>{Object(u.a)({action:"artist-spotify",artist:e})});const o=s.a.map(e,e=>({song_id:e.song_id,artist_id:e.artist_id}));return i.default.SongArtist.bulkCreate(o,{transaction:t})}).then(()=>Promise.all(f)).then(e=>i.default.SongGenre.bulkCreate(e,{transaction:t})).then(()=>S(e)).then(n).catch(o)}),y=e=>new Promise((t,n)=>{const i=e.data.file.filepath+"/"+e.data.file.filename;Object(r.parseFile)(i).then(n=>{const i={filepath:e.data.file.filepath,filename:e.data.file.filename,title:n.common.title,album:n.common.album,year:n.common.year,bitrate:n.format.bitrate,duration:n.format.duration,samplerate:n.format.sampleRate,size:e.data.stats.size,ino:e.data.stats.ino,birth:e.data.stats.birthtime};let o=n.common.artist;0===o.length&&(o=s.a.join(n.common.artists,";")),t({song:i,artist:o,genre:n.common.genre,cover:n.common.picture})}).catch(n)}),S=e=>new Promise((t,n)=>{const i=e.cover,o=e.song.filename;if(i.length>0){const e=i[0].data,t=o.lastIndexOf("."),s=p+"/"+o.substring(0,t)+".jpg",r=p+"/thumbs/"+o.substring(0,t)+".jpg";c.a.read(e,(e,t)=>{e?n(e):t.resize(500,500).quality(60).write(s).resize(150,150).quality(60).write(r)})}t()})}]);